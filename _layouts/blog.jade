extends layout

block title 
  title Blog | Kevin Yeh

block cover
  +cover()(class='bluesky')

block cover-text
  h1.text-shadowed The Blog
  a(href='http://www.scriptogr.am/kyeah'): h2(style='color: #DB6837') Looking for my film blog?

block content
    section#main-content
      section#1.section(data-magellan-destination='1')
        .row
          h2 Seeing Threes at the End of the Road
          p(style='color:#999999')
            | Posted
            time.timeago(datetime='2013-10-24T22:47:15-0400')
            | on Oct 24&comma; 2013&period;
          .large-10.large-centered.columns
            img(src='images/blog/blastro_trio.png')
            h5(style='color:#EEEEEE; border-bottom:1px solid #aaa')
              br
              b Update&colon; 
              | The 
              a(href='https://play.google.com/store/apps/details?id=com.blastro.android') Blastro
              | &comma; 
              a(href='https://play.google.com/store/apps/details?id=com.roxwel.android') Roxwel
              | &comma; 
              | and 
              a(href='https://play.google.com/store/apps/details?id=com.yallwire.android') Yallwire 
              | apps
              | have been released&period; Come celebrate with us&period;
              br
              br
            br
            h5(style='color:#EEEEEE')
              | We made it&period; It&apos;s happening&period; Blastro Networks is finally ready to release their
              | redesigned&comma;
              | rejuvenated android apps&comma; due in large part to the work I did over the summer&comma; and also to the
              | less frequent work I&apos;ve done over the last few school months&period; Although I have my reservations
              | about a few of the design choices made by the company&comma; I understand the immense amount of planning that
              | occurs behind the scenes to keep all of their web and mobile apps behaving homogeneously and at a
              | high level of polish&period; Nevertheless&comma; they put a lot of faith in my ability as a novice Android
              | developer at the time of my hiring&comma; and I was blessed with an opportunity to lead the redesign and
              | rebuilding of their three flagship apps as their sole developer&period;
              br
              br
              | Having come this far&comma; I&apos;ve learned a ton of things about the Android platform&comma; and I&apos;ve been
              | constantly impressed by the huge amount of support from third-party developers&comma; who provide
              | libraries that make complex tasks easy to implement and efficient to run&period; As an
              | Android-developer-in-training&comma; I would often revise old&comma; deprecated code from the older Blastro
              | app to make it cleaner and more efficient&comma; only to realize that a library introduced in the past
              | year was perfect for the job and could be integrated with just a few adjustments to the existing
              | code base&period; Although it was disappointing to realize the last few hours of work were unnecessary&comma;
              | it ultimately allowed me to understand the Android lifecycle and architectures much more clearly&comma;
              | and you know what they say &ndash; you shouldn&apos;t use a tool unless you know how it works&comma; or you&apos;ll be
              | tearing your hair out when problems arise&period;
              br
              br
              | A lot of the UI flow I was asked to implement by my technical advisors involved modifying standard
              | Android and third-party classes&comma; and my past failures and successes working at an unnecessarily
              | low level made it easy to understand how these classes interacted with the Android state and what
              | their limitations were&period; While modifying the MediaController class to provide a custom video player
              | controller&comma; I was surprised by some of the haphazard logic in the standard controller&comma; and had to
              | fix several bugs regarding video connections and the play-pause state that occurred whenever the
              | surface state was changed &ndash; an event triggered by things like orientation changes and keyboard
              | layout accommodations&period;
              br
              br
              | One of the biggest challenges was modifying ListViews and GridViews to get the proper behavior to
              | take place on the main artist and video browsers&comma; where a single list holds sorted list results&comma; a
              | large carousel of featured items&comma; and a scrolling&sol;sticky button bar&comma; all interconnected but with
              | different behaviors and layout needs from within the view&period; You can note one glaring problem with
              | my solution in grid mode&comma; where the GridView will often recycle the carousel view and not be able
              | to recognize its need to be redrawn&period; However&comma; these types of graphical issues only seem to crop up
              | on certain devices&comma; such as the Galaxy SIII&comma; and a lot of care was made to limit fragmentation
              | issues before release&period;
              br
              br
              | Although portions of the UI flow were requested by my advisors&comma; the UI design itself was decidedly
              | in my hands&comma; and they trusted me to bring an updated Holo style to their apps while retaining an
              | overall feel similar to the iOS app&period; The first rough version of the app followed the iOS app very
              | closely&comma; but as I grew more comfortable with Android design patterns and the way resources are
              | interconnected&comma; I was able to develop my own custom styles for various portions of the app and
              | remodel its look and feel to be snappier and more eye-catching&period;
              br
              br
              | Overall&comma; I&apos;m happy with the way the apps came out&comma; and I was able to dip myself into almost every
              | aspect of the Android app lifecycle &ndash; networking&comma; efficient storage and display of data&comma;
              | synchronization of account data&comma; UI design and flow&comma; third-party library integration &lpar;including
              | social media and ads&rpar;&period;&period;&period;
              br
              br
              | Look out for the new-look Blastro&comma; Roxwel and Yallwire on the Google Play Store soon&comma; and get
              | pumped for eventual Chromecast support&period;
      .row
        hr
      section#2.section(data-magellan-destination='2')
        .row
          h2 Getting Cozy with Android Studio
          p(style='color:#999999')
            | Posted
            time.timeago(datetime='2013-05-24T16:07:15-0400')
            | on May 24&comma; 2013&period;
          .large-10.large-centered.columns
            h5(style='color:#EEEEEE')
              | I recently switched over to Android Studio after months of
              | frustratingly sitting back in my chair while Eclipse plinked around&comma; cleaning and building the
              | project every
              | time I
              | changed a few lines of code&period;
              br
              br
              | Thank god&period;
              br
              br
              | This is my first encounter with an IDE from JetBrains&period; It&apos;s cleaner&comma; faster&comma; and it just feels
              | good to work with&period;
              i It feels right&period;
              | I don&apos;t have to tinker around with the 3 perspectives I
              | want and the 15 others that get in the way&semi; I don&apos;t have to slow my IDE down with plugins for vital functionality&semi; I don&apos;t have to wade through menus to fix dependencies and all the other miscellaneous things that go wrong in Eclipse&period; Android Studio comes in hot&period; It does what you want&comma; when you want&period; It makes sense&period;
              br
              br
              | Android Studio is a joint effort between Google and JetBrains&comma; and is built on JetBrain&apos;s IntelliJ IDEA&period; Despite being in early access preview&comma; it manages to be better than Eclipse in just about every way possible&period; It&apos;s like that new kid in school with a fresh leather jacket and well-trimmed pompadour who manages to steal all the popular kids&apos; crewmates and girlfriends before simultaneously revealing his 1964 Aston Martin and dropping the pants of everyone in a 5-mile radius&period;
              br
              br
              | Or something like that&period;
              br
              br
              | One of my favorite things about AS is how dynamic it is&colon; color previews appear instantaneously and you can view the layout of your app on a number of different devices without ever compiling the project&period; I often found myself waiting for Eclipse whenever I wanted to test and compare different colors and positions&comma; and I&apos;ve probably wasted several hours nudging padding and weights to make it perfect&period; While I enjoy getting paid to reddit during compilation&comma; sometimes a man just needs to see the damn thing work so he can move on to more important matters&period;
              br
              br
              | My only complaint is the Logcat viewer&period; The only way to stop auto-scrolling to the most recent log is to click your way through an error&comma; which automatically opens up the offending file&period; While I do appreciate the effort&comma; it ends up being a nuisance to work with&period; There also appears to be some slowdown when attaching the debugger&comma; which wasn&apos;t there when using Eclipse&period; Hopefully we&apos;ll see some improvements with Logcat going forward&comma; but Android Studio manages to blow Eclipse away so completely in every other category that it&apos;s hard to imagine going back&period;
              br
              br
              | In Google and JetBrains I believe&period;
      .row
        hr
      section#3.section(data-magellan-destination='3')
        .row
          h2 HELLO&comma; BLOG
          p(style='color:#999999')
            | Posted
            time.timeago(datetime='2013-05-24T07:30:00-0400')
            | on May 24&comma; 2013&period;
          .large-10.large-centered.columns
            h5(style='color:#EEEEEE')
              | Early morning nonsense post&semi; ignore&period; thank you&period;
              br
              //
                /br>Hello, blog. After months of neglecting my side-projects, I found myself wrapped up in my headphones at four o'clock in the morning, questioning the past two weeks of stewing in my own pity and despair and coming down with a severe urge to make something respectable of myself before the sun rose. 
                </br></br>
                Two hours later, I'd managed to fool around with the Foundation javascript files and import lightboxes, albeit with a minor crisis in how much example code should find its way into my own codebase. I had originally planned a black-and-white layout for my personal site, but this dark checkerboard pattern seems quite nice and homely -- looking at a white background in total darkness is never pleasant. The green font colors may need to be changed, but overall, the example CSS is a good base for variation. I try to stray from simply importing and using code -- understand it and modify it to fit your needs, or rebuild it entirely if it's just not malleable enough, because sometimes building your own tools is a lot easier than working with a pre-made one.
                </br></br>
                Looking at the design of the site again, I decided to extend the "Hello" intro bar across the entire row. This has a double-whammy effect of naturally drawing eyes towards the three icons on the right while making the Github octocat stand out against the grey background, making visitors more likely to take a look at my code base and LinkedIn. I feel more like an OCD designer than a programmer when working on this website, but I should be learning some javascript in the next few weeks to help jumpstart my brain. I'll be looking to inject some life into the site with a custom last.fm ticker to show a live feed of my most recently played songs on iTunes, but first: project descriptions. And an actual blog infrastructure.

      // Footer
      footer.row
        .large-12.columns
          hr
          .row
            .large-6.columns
              ul.small-block-grid-10
                li
                  a(href='http://www.github.com/kyeah')
                    img(src='images/logos/octocat.png', title='My Github')
                li
                  a(href='http://www.linkedin.com/profile/view?id=205992470')
                    img(src='images/logos/linkedin-60.png', title='My LinkedIn')
                li
                  a(href='http://www.last.fm/user/k-yeah')
                    img(src='images/logos/lastfm-60.png', title='Music on Last.fm')
                li
                  a(href='https://www.hackerleague.org/users/kyeahokay')
                    img(src='images/logos/hackerleague.png', title='My Hacker League')
            .large-6.columns
              ul.inline-list.right
                li
                  a(href='#') Mystery
                li
                  a(href='#') Surprise
                li
                  a(href='#') What is this&quest;
                li
                  a(href='#') Where am I&quest;
                li
                  a(href='#') Who&apos;s your daddy&quest;
                li
                  a(href='#') Don&apos;t leave me
                li
                  a(href='#') Goodbye